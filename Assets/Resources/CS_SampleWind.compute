
#pragma kernel SampleWind

StructuredBuffer<float> _WindBuffer;
struct SpawnData
{
    float3 positionWS;
    float hash;
    float4 clumpInfo;
    float density;
    float wind;
    int index;

};
RWStructuredBuffer<SpawnData> _SpawnBuffer;


uint _IndexX;
uint _IndexY;
uint _ChunkDimension;
uint _NumChunkPerSide;
uint _InstancePerTile;

uint ChunkToGlobalIndex(uint i, uint2 offset, uint chunkDim, uint numChunk)
{
    return chunkDim * chunkDim * numChunk * offset.x + chunkDim * offset.y + (i / chunkDim) * chunkDim * (numChunk - 1) + i;
}
[numthreads(128,1,1)]
void SampleWind (uint3 id : SV_DispatchThreadID)
{
    
    if (id.x >= _ChunkDimension * _ChunkDimension)
        return;
    int tileStart = id.x * _InstancePerTile;
    for (uint i = 0; i < _InstancePerTile; i++)
        _SpawnBuffer[tileStart + i].wind = _WindBuffer[ChunkToGlobalIndex(id.x, uint2(_IndexX, _IndexY),_ChunkDimension,_NumChunkPerSide)];
}

#pragma kernel SampleNormal

StructuredBuffer<float3> _NormalBuffer;
RWStructuredBuffer<float3> _SampledNormalBuffer;
[numthreads(128, 1, 1)]
void SampleNormal(uint3 id : SV_DispatchThreadID)
{
    
    if (id.x >= _ChunkDimension * _ChunkDimension)
        return;
    int tileStart = id.x * _InstancePerTile;
    for (uint i = 0; i < _InstancePerTile; i++)
        _SampledNormalBuffer[tileStart + i]= _NormalBuffer[ChunkToGlobalIndex(id.x, uint2(_IndexX, _IndexY), _ChunkDimension, _NumChunkPerSide)];
}