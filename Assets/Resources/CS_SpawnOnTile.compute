#pragma kernel CSMain
#pragma kernel ResetArgs

uint _NumTiles;
uint _NumTilesPerSide;
uint _Subdivisions;
float _Time;
float4x4 _Camera_VP;

StructuredBuffer<float3> _VertBuffer;
struct SpawnData
{
    float3 positionWS;
};
AppendStructuredBuffer<SpawnData> _SpawnBuffer;


struct Args
{
    uint meshVertCount;
    uint numOfInstance;
    uint meshIndexStart;
    uint meshBaseVertex;
    uint reserved;
};
RWStructuredBuffer<Args> _ArgsBuffer;
RWStructuredBuffer<float4> _NoiseBuffer;

#include "../INCLUDE/HL_Noise.hlsl"


[numthreads(128,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _NumTiles )
        return;
    
    int vertStart = id.x * 4;
    float3 verts[4];
    [unroll]for (int i = 0; i < 4; i++)
        verts[i] = _VertBuffer[vertStart + i];
    
    
    uint iteration = _Subdivisions;

    float3 chunkSize = verts[2] - verts[0];
    float3 inc = chunkSize / iteration;
    
    int2 tileCoord = int2(ceil(id.x / _NumTilesPerSide), id.x % _NumTilesPerSide);
    float tileNoise = perlinNoise((tileCoord - _Time * 100) * 0.01, float2(12.9898, 78.233));
    
    _NoiseBuffer[id.x] = float4(tileNoise,0,0,0);

    for (uint x = 0; x < iteration; x++)
    {
        for (uint z = 0; z < iteration; z++)
        {
            float2 noise = rand2dTo2d(float2(verts[0].x + inc.x * x, verts[0].z + inc.z * z));
            noise *= float2(inc.x, inc.z);
            float3 pos = float3(verts[0].x + inc.x * x + noise.x, verts[0].y, verts[0].z + inc.z * z + noise.y);
            
            float4 posCS = mul(_Camera_VP, float4(pos, 1));
            float3 posNDS = posCS.xyz / posCS.w;
            posNDS.z = -posCS.w;
            bool isInView = (posNDS.x < -1.1 || posNDS.x > 1.1 || posNDS.z < -0.1 || posNDS.z > 50.0) ? 0 : 1;
            if (isInView)
            {
                InterlockedAdd(_ArgsBuffer[0].numOfInstance, 1);
                SpawnData o;
                o.positionWS = pos;
                _SpawnBuffer.Append(o);
            }
            
        }
    }

}

[numthreads(1, 1, 1)]
void ResetArgs(uint3 id : SV_DispatchThreadID)
{
    _ArgsBuffer[0].numOfInstance = 0;
}