#pragma kernel Vote
#pragma kernel Scan
#pragma kernel Compact
#pragma kernel ClearArgs


struct Args
{
    uint meshVertCount;
    uint numOfInstance;
    uint meshIndexStart;
    uint meshBaseVertex;
    uint reserved;
};

struct SpawnData
{
    float3 positionWS;
    float hash;
    float4 clumpInfo;
    float4 postureData;
};

StructuredBuffer<SpawnData> _SpawnBuffer;
RWStructuredBuffer<uint> _VoteBuffer;
RWStructuredBuffer<uint> _ScanBuffer;
RWStructuredBuffer<SpawnData> _CompactBuffer;
RWStructuredBuffer<Args> _ArgsBuffer;


uint _InstanceCount;
float4x4 _Camera_VP;

#define NUM_THREAD  32
#define LOG_NUM_THREAD 5
#define NUM_GROUP 1024
groupshared int temp[2 * NUM_THREAD * 2- 2 ];

[numthreads(64, 1, 1)]
void Vote (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _InstanceCount)
        return;
    
    float3 pos = _SpawnBuffer[(int)id.x].positionWS;
    
    float4 posCS = mul(_Camera_VP, float4(pos,1));
    float3 posNDS = posCS.xyz / posCS.w;
    posNDS.z = -posCS.w;
   

    
    bool isInView = (posNDS.x < -1.1 || posNDS.x > 1.1 || posNDS.z  < -0.1) ? 0 : 1;
    _VoteBuffer[id.x] = isInView;
    

}

[numthreads(NUM_THREAD, 1, 1)]
void Scan(uint3 id : SV_DispatchThreadID)
{
    temp[2 * id.x] = _VoteBuffer[2 * id.x];
    temp[2 * id.x + 1] = _VoteBuffer[2 * id.x + 1];
    uint d;
    uint end = NUM_THREAD * 2;
    uint start = 0;
    for (d = NUM_THREAD; d >= 2; d >>= 1)
    {
        GroupMemoryBarrierWithGroupSync();
        if (id.x < d)
        {
            temp[end + id.x] = temp[2 * id.x + start] + temp[2 * id.x + 1 + start];
            
        }
        start = end;
        end += d;

    }
    
    GroupMemoryBarrierWithGroupSync();
    if (id.x == 0)
    {
        temp[end - 1] = temp[end - 2];
        temp[end - 2] = 0;
    }
    
    for (d = 2; d <= NUM_THREAD; d *= 2)
    {
        GroupMemoryBarrierWithGroupSync();
        end -= d;
        start -= d * 2;
        if (id.x < d)
        {
            int t = temp[start + id.x * 2];
            temp[2 * id.x + start] = temp[end + id.x];
            temp[2 * id.x + 1 + start] = t + temp[end + id.x];
        }
    }
    GroupMemoryBarrierWithGroupSync();
    
    _ScanBuffer[2 * id.x] = temp[2 * id.x];
    _ScanBuffer[2 * id.x + 1] = temp[2 * id.x + 1];

}
[numthreads(64, 1, 1)]
void Compact(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _InstanceCount)
        return;
    
    if (_VoteBuffer[id.x] == 1)
    {
        InterlockedAdd(_ArgsBuffer[0].numOfInstance, 1);
        _CompactBuffer[_ScanBuffer[id.x]] = _SpawnBuffer[id.x];
    }

}
[numthreads(1, 1, 1)]
void ClearArgs(uint3 id : SV_DispatchThreadID)
{
    _ArgsBuffer[0].numOfInstance = 0;
}


